# See: https://circleci.com/blog/deploying-documentation-to-github-pages-with-continuous-integration/
version: 2.1

# document commands used by downstream jobs
commands:
  check-skip:
    steps:
      - run:
          name: Check-skip
          command: |
            if [ ! -d "sktree" ]; then
              echo "Build was not run due to skip, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi
            export git_log=$(git log --max-count=1 --pretty=format:"%B" | tr "\n" " ")
            echo "Got commit message:"
            echo "${git_log}"
            if [[ -v CIRCLE_PULL_REQUEST ]] && ([[ "$git_log" == *"[skip circle]"* ]] || [[ "$git_log" == *"[circle skip]"* ]]); then
              echo "Skip detected, exiting job ${CIRCLE_JOB} for PR ${CIRCLE_PULL_REQUEST}."
              circleci-agent step halt;
            fi
  apt-install:
    steps:
      - run:
          name: Install apt packages
          command: |
            sudo apt-get update
            sudo apt-get install libopenblas-dev gfortran libgmp-dev libmpfr-dev ccache
            # make sure pandoc is on the system
            sudo apt-get update && sudo apt-get install -y pandoc optipng

            # install pysal dependencies
            sudo apt install libspatialindex-dev xdg-utils

      - run:
          name: Set BASH_ENV
          command: |
            set -e
            sudo apt update
            sudo apt-get update
            sudo apt install -qq graphviz optipng libxft2 graphviz-dev
            echo 'set -e' >> $BASH_ENV
            echo 'export OPENBLAS_NUM_THREADS=4' >> $BASH_ENV
            echo 'export XDG_RUNTIME_DIR=/tmp/runtime-circleci' >> $BASH_ENV
            echo 'export PATH=~/.local/bin/:$PATH' >> $BASH_ENV
            echo 'export DISPLAY=:99' >> $BASH_ENV
            echo 'BASH_ENV:'
            cat $BASH_ENV
  merge:
    steps:
      - run:
          name: merge with upstream
          command: |
            echo $(git log -1 --pretty=%B) | tee gitlog.txt
            echo ${CI_PULL_REQUEST//*pull\//} | tee merge.txt
            if [[ $(cat merge.txt) != "" ]]; then
              echo "Merging $(cat merge.txt)";
              git remote add upstream https://github.com/neurodata/scikit-tree.git;
              git pull --ff-only upstream "refs/pull/$(cat merge.txt)/merge";
              git fetch upstream main;
            fi

jobs:
  # Build scikit-tree from source
  build_scikit_tree:
    docker:
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/doc/2.0/circleci-images/
      - image: cimg/python:3.9
    steps:
      - checkout
      - check-skip
      - merge
      - apt-install

      - restore_cache:
          keys:
            - deps_ccache-{{ .Branch }}
            - deps_ccache

      - run:
          name: setup Python venv
          command: |
            pip install --upgrade pip spin
            spin setup-submodule
            pip install .[build,doc]

      - run:
          name: build scikit-tree
          command: |
            spin build -j2

      - save_cache:
          key: deps_ccache-{{ .Branch }}
          paths:
            - ~/.ccache
            - ~/.cache/pip

      - run:
          name: ccache performance
          command: |
            ccache -s

      # persist, so downstream tasks can use the built image
      - persist_to_workspace:
          root: ~/
          paths:
            - .

  build_docs:
    docker:
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/doc/2.0/circleci-images/
      - image: cimg/python:3.9
    steps:
      - attach_workspace:
          at: ~/

      - check-skip
      - apt-install

      - run:
          name: build docs
          no_output_timeout: 25m
          command: |
            ls
            ls build
            ls build-install
            echo "After..."
            ls build-install/**
            export PYTHONPATH=$PWD/build-install/usr/lib/python3.8/site-packages
            ./spin docs

      - store_artifacts:
          path: doc/_build/html
          destination: dev

      - store_artifacts:
          path: doc/_build/html_stable/
          destination: stable

      - persist_to_workspace:
          root: doc/_build
          paths:
            - html
            - html_stable

  docs-deploy:
    docker:
      - image: node:8
    steps:
      - checkout

      - attach_workspace:
          at: doc/_build

      - restore_cache:
          keys:
            - website-cache

      - run:
          name: Install and configure dependencies
          command: |
            npm install --global gh-pages@3.0
            git config --global user.email "circle@scikit-tree.com"
            git config --global user.name "Circle Ci"

      - add_ssh_keys:
          fingerprints:
            - "57:39:99:f3:09:80:6a:70:ca:c0:2a:06:14:16:ce:60"

      - run:
          # push built docs into the `dev` directory on the `gh-pages` branch
          name: Deploy docs to gh-pages branch
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              echo "Deploying dev docs for ${CIRCLE_BRANCH}.";
              gh-pages --dotfiles --message "docs updates [skip ci] (${CIRCLE_BUILD_NUM})" --dist doc/_build/html --dest ./dev
            else
              echo "Deploying stable docs for ${CIRCLE_BRANCH}.";
              gh-pages --dotfiles --message "docs updates [skip ci] (${CIRCLE_BUILD_NUM})" --dist doc/_build/html --dest ./stable
            fi;

      - save_cache:
          key: website-cache
          paths:
            - ~/sktree

workflows:
  build-docs:
    jobs:
      - build_scikit_tree
      - build_docs:
          requires:
            - build_scikit_tree
      - docs-deploy:
          requires:
            - build_docs
          filters:
            branches:
              only: main
